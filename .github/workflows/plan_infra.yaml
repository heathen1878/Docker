name: Plan Infra
on:
  pull_request: 
    branches:
      - '*'
    paths:
      - '**.tf'

jobs:
  deploy_infra:
    runs-on: ubuntu-latest
    name: Plan Infrastructure using Terraform

    defaults:
      run:
        working-directory: ./iac/frontend_app_service

    steps:
      - name: checkout repository
        uses: actions/checkout@v2

      - name: auth
        uses: azure/login@v2
        with:
          creds: '{"clientId": "${{ secrets.ARM_CLIENT_ID }}", "clientSecret": "${{ secrets.ARM_CLIENT_SECRET }}", "tenantId": "${{ secrets.ARM_TENANT_ID }}", "subscriptionId": "${{ vars.ARM_SUBSCRIPTION_ID }}"}'

      - name: get runner ip
        id: runner_ip
        run: |
          IP_ADDR=$(curl -s https://ifconfig.me/ip)
          echo "IPADDR=$IP_ADDR" >> $GITHUB_OUTPUT

      - name: modify state storage acl
        run: |
          az storage account network-rule add --account-name ${{ vars.STATE_STORAGE_ACCOUNT }} --ip-address ${{ steps.runner_ip.outputs.IPADDR }} --subscription ${{ vars.ARM_SUBSCRIPTION_ID }}  > /dev/null 2>&1
          echo "Pausing for 60 seconds to ensure the ACL has been set..."
          sleep 60

      - name: install terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ vars.TERRAFORM_VERSION }}

      - name: set_authentication_variables
        id: auth
        run: |
          echo "ARM_CLIENT_ID=${{ secrets.ARM_CLIENT_ID }}" >> $GITHUB_OUTPUT
          echo "ARM_CLIENT_SECRET=${{ secrets.ARM_CLIENT_SECRET }}" >> $GITHUB_OUTPUT
          echo "ARM_TENANT_ID=${{ secrets.ARM_TENANT_ID }}" >> $GITHUB_OUTPUT
          echo "ARM_SUBSCRIPTION_ID=${{ vars.ARM_SUBSCRIPTION_ID }}" >> $GITHUB_OUTPUT
          echo "ARM_USE_AZUREAD=true" >> $GITHUB_OUTPUT
      
      - name: terraform init
        id: init
        run: |
          cd ./iac/frontend_app_service

          # export variables as environment variables
          export ${{ steps.auth.outputs.ARM_CLIENT_ID }}
          export ${{ steps.auth.outputs.ARM_CLIENT_SECRET }}
          export ${{ steps.auth.outputs.ARM_TENANT_ID }}
          export ${{ steps.auth.outputs.ARM_SUBSCRIPTION_ID }}
          export ${{ steps.auth.outputs.ARM_USE_AZUREAD }}
          
          terraform init \
          -upgrade \
          -input=false \
          -backend-config="storage_account_name=${{ vars.STATE_STORAGE_ACCOUNT }}" \
          -backend-config="container_name=${{ vars.STATE_STORAGE_CONTAINER }}" \
          -backend-config="key=${{ vars.STATE_FILE_NAME }}"
     
      - name: terraform plan
        id: plan
        run: |
          cd ./iac/frontend_app_service

          # export variables as environment variables
          export ${{ steps.auth.outputs.ARM_CLIENT_ID }}
          export ${{ steps.auth.outputs.ARM_CLIENT_SECRET }}
          export ${{ steps.auth.outputs.ARM_TENANT_ID }}
          export ${{ steps.auth.outputs.ARM_SUBSCRIPTION_ID }}
          export ${{ steps.auth.outputs.ARM_USE_AZUREAD }}

          terraform plan -no-color -out out.tfplan

          terraform show -no-color out.tfplan > plan.md

          sed -i '3 i\```' plan.md
          echo '```' >> plan.md

          cat plan.md > $GITHUB_STEP_SUMMARY

      - name: comments
        uses: actions/github-script@v6
        with:
          #github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            echo ${{ steps.plan.outputs.stdout }}

            echo ${{ steps.plan.outcome }}

      - name: modify state storage acl - clean up
        if: always()
        run: |
          az storage account network-rule remove --account-name ${{ vars.STATE_STORAGE_ACCOUNT }} --ip-address ${{ steps.runner_ip.outputs.IPADDR }}  --subscription ${{ vars.ARM_SUBSCRIPTION_ID }}  > /dev/null 2>&1