name: Plan Infra
on:
  pull_request: 
    branches:
      - '*'
    paths:
      - '**.tf'


jobs:
  deploy_infra:
    runs-on: ubuntu-latest
    name: Plan Infrastructure using Terraform
    steps:
      - name: checkout repository
        uses: actions/checkout@v2

      - name: auth
        uses: azure/login@v2
        with:
          creds: '{"clientId": "${{ secrets.ARM_CLIENT_ID }}", "clientSecret": "${{ secrets.ARM_CLIENT_SECRET }}", "tenantId": "${{ secrets.ARM_TENANT_ID }}", "subscriptionId": "${{ vars.ARM_SUBSCRIPTION_ID }}"}'

      - name: get runner ip
        id: runner_ip
        run: |
          IP_ADDR=$(curl -s https://ifconfig.me/ip)
          echo "IPADDR=$IP_ADDR" >> $GITHUB_ENV

      - name: modify state storage acl
        run: |
          az storage account network-rule add --account-name ${{ vars.STATE_STORAGE_ACCOUNT }} --ip-address $IPADDR --subscription ${{ vars.ARM_SUBSCRIPTION_ID }}
          echo "Pausing for 60 seconds to ensure the ACL has been set..."
          sleep 60

      - name: install terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ vars.TERRAFORM_VERSION }}
      
      - name: terraform init
        id: init
        run: |
          cd ./iac/frontend_app_service

          # export variables as environment variables
          export ARM_CLIENT_ID=${{ secrets.ARM_CLIENT_ID }}
          export ARM_CLIENT_SECRET=${{ secrets.ARM_CLIENT_SECRET }}
          export ARM_TENANT_ID=${{ secrets.ARM_TENANT_ID }}
          export ARM_SUBSCRIPTION_ID=${{ vars.ARM_SUBSCRIPTION_ID }}
          export ARM_USE_AZUREAD=true
          
          terraform init \
          -upgrade \
          -input=false \
          -backend-config="storage_account_name=${{ vars.STATE_STORAGE_ACCOUNT }}" \
          -backend-config="container_name=${{ vars.STATE_STORAGE_CONTAINER }}" \
          -backend-config="key=${{ vars.STATE_FILE_NAME }}"
     
      - name: terraform plan
        id: plan
        run: |
          cd ./iac/frontend_app_service

          # export variables as environment variables
          export ARM_CLIENT_ID=${{ secrets.ARM_CLIENT_ID }}
          export ARM_CLIENT_SECRET=${{ secrets.ARM_CLIENT_SECRET }}
          export ARM_TENANT_ID=${{ secrets.ARM_TENANT_ID }}
          export ARM_SUBSCRIPTION_ID=${{ vars.ARM_SUBSCRIPTION_ID }}
          export ARM_USE_AZUREAD=true

          terraform plan -no-color -out out.tfplan

          cat out.tfplan > $GITHUB_STEP_SUMMARY

      # - name: comments
      #   uses: actions/github-script@v7
      #   env:
      #     PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      #   with:
      #     script: |
      #       #### Terraform Plan ðŸ“–\`${{ steps.plan.outcome }}\`

      #       <details><summary>Show Plan</summary>

      #       \`\`\`\n
      #       ${process.env.PLAN}
      #       \`\`\`

      #       </details>

      #       *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

      #       github.rest.issues.createComment({
      #         issue_number: context.issue.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: output
      #       })

      - name: modify state storage acl - clean up
        if: always()
        run: |
          az storage account network-rule remove --account-name ${{ vars.STATE_STORAGE_ACCOUNT }} --ip-address $IPADDR --subscription ${{ vars.ARM_SUBSCRIPTION_ID }}
  
